/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java Library project to get you started.
 * For more details take a look at the Java Libraries chapter in the Gradle
 * User Manual available at https://docs.gradle.org/5.4/userguide/java_library_plugin.html
 */
buildscript {
    ext {
    	ideJavaVersion='17'
        javaVersion='17'
        armeriaVersion='1.26.4'
        nettyVersion='4.1.100.Final'
        
        springBootVersion = '3.2.0'
        springDependencyManagementVersion = '1.1.4'
        protobufGradlePlugin = '0.9.4'
        
        lettuceVersion='5.3.0.RELEASE'
        
        protocVersion='3.11.1'
        // README It is not running under the 1.30.1, so the older version 1.29.0 will be used.
        grpcVersion='1.60.0'
        
        slf4jVersion='2.0.4'
        logbackVersion='1.3.5'
    }

    repositories {
        gradlePluginPortal()
    }

    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
        classpath "com.google.protobuf:protobuf-gradle-plugin:${protobufGradlePlugin}"
    }
}

plugins {
    id "java"
    id "eclipse"
    id "io.spring.dependency-management" version "${springDependencyManagementVersion}"
    id "org.springframework.boot" version "${springBootVersion}"
    id "application" // gradle task plugin for distTar
    
    id "org.ajoberstar.grgit" version "4.0.2"
    id "com.gorylenko.gradle-git-properties" version "2.4.1"  // add git information to actuator endpoint
    id "com.google.protobuf" version "${protobufGradlePlugin}"
}

ext {
	hashVersion = "1.0.0-${grgit.head().abbreviatedId}"
	print "current hash version $hashVersion"

	print grgit.branch.current.name
}

java {
  toolchain {
    languageVersion.set(JavaLanguageVersion.of(ideJavaVersion))
  }
}

// generateGitProperties task runs after the compileJava task
generateGitProperties.dependsOn 'compileJava'

// same with tasks['clean'].doLast({ ...
clean {
     delete fileTree("${projectDir}/gen-src") { include '**/*.java' }
}

tasks.withType(JavaCompile) {
	javaCompile -> println "Hello, " + javaCompile.name

    options.encoding = 'UTF-8'
    // source and target compatibility
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion

    options.compilerArgs += '-parameters'
    
    processResources {
        duplicatesStrategy = org.gradle.api.file.DuplicatesStrategy.INCLUDE
    }
}

tasks.named('test') {
  useJUnitPlatform()
}

eclipse {
    classpath {
        defaultOutputDir = file('classes')
        downloadJavadoc = false
        downloadSources = true

        file.whenMerged { classpath -> classpath.entries.sort() }
    }
}

group = 'com.github.armedis'
version = '1.0.0-SNAPSHOT'
description = """An HTTP2/gRPC interface for Redis, Support Redis stand-alone/cluster mode."""
mainClassName = "com.github.armedis.ArmedisServer"

protobuf {
    protoc {
        artifact = "com.google.protobuf:protoc:${protocVersion}"

        // Set the location of generated source code by protoc compiler
        //generatedFilesBaseDir = "$projectDir/gen-src"
    }

    plugins {
        grpc {
            artifact = "io.grpc:protoc-gen-grpc-java:${grpcVersion}"
        }
    }

    generateProtoTasks {
        all()*.plugins {
            grpc {}
        }
    }
}

// Add source dir for generated source code of gRPC
sourceSets {
    main {
        proto {
          // In addition to the default 'src/main/proto'
          srcDir 'src/main/protobuf'
          srcDir 'src/main/protocolbuffers'
          // In addition to the default '**/*.proto' (use with caution).
          // Using an extension other than 'proto' is NOT recommended,
          // because when proto files are published along with class files, we can
          // only tell the type of a file from its extension.
          include '**/*.protodevel'
        }
        java {
            // add source folder order
          srcDirs 'src/main/java'
        }
        resources {
          srcDirs 'src/main/resources'
        }
    }
    test {
    	java {
	    	srcDirs 'src/test/java'
    	}
    }
}

repositories {
    jcenter()
}

configurations {
    all {
    	// for slf4j + logback setting start.
        exclude group: "org.springframework.boot", module : "spring-boot-starter-logging"
        exclude group: "org.slf4j", module: "slf4j-log4j12"
    	exclude group: "log4j", module: "log4j"
    	// for slf4j + logback setting end.
    }
}

dependencyManagement {
    imports {
        mavenBom "io.micrometer:micrometer-bom:1.11.5"
        mavenBom "io.netty:netty-bom:${nettyVersion}"
        mavenBom "com.linecorp.armeria:armeria-bom:${armeriaVersion}"
    }
}

dependencies {
    implementation "io.grpc:grpc-netty:${grpcVersion}"
    implementation "io.grpc:grpc-protobuf:${grpcVersion}"
    implementation "io.grpc:grpc-stub:${grpcVersion}"

    // Adjust the list as you need.
    ['armeria',
    'armeria-brave',
    'armeria-grpc',
    'armeria-jetty11',
    'armeria-kafka',
    'armeria-logback12',
    'armeria-retrofit2',
    'armeria-rxjava3',
    'armeria-saml',
    'armeria-thrift0.18',
    'armeria-tomcat10',
    'armeria-zookeeper3'].each {
        implementation "com.linecorp.armeria:${it}:${armeriaVersion}"
    }

    // Logging
    implementation 'ch.qos.logback:logback-classic:1.4.11'

    implementation "com.linecorp.armeria:armeria-spring-boot3-autoconfigure:${armeriaVersion}"
    implementation "com.linecorp.armeria:armeria-spring-boot3-actuator-starter:${armeriaVersion}"

    implementation "org.springframework.boot:spring-boot-starter-actuator"

    implementation "org.springframework.boot:spring-boot-starter"
    implementation "org.springframework.boot:spring-boot-configuration-processor"

    implementation group: 'org.apache.commons', name: 'commons-text', version: '1.10.0'
    implementation group: 'org.apache.commons', name: 'commons-collections4', version: '4.4'
    implementation group: 'org.apache.commons', name: 'commons-pool2', version: '2.12.0'

    implementation "io.lettuce:lettuce-core:${lettuceVersion}"

    implementation "com.google.code.gson:gson:2.10.1"

    // Logging
    implementation "org.slf4j:slf4j-api:${slf4jVersion}"
    implementation "org.slf4j:jcl-over-slf4j:${slf4jVersion}"
    implementation "ch.qos.logback:logback-classic:${logbackVersion}"
    implementation "ch.qos.logback:logback-core:${logbackVersion}"

    // Use JUnit test framework
    testImplementation 'org.springframework.boot:spring-boot-starter-test'

    // json unit
    testImplementation 'net.javacrumbs.json-unit:json-unit-fluent:2.3.0'

    // It is a workaround for the bug, when execute junit test case under eclipse(2020-03 (4.15.0)).
    // java.lang.NoClassDefFoundError: org/junit/platform/engine/EngineDiscoveryListener
    // testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}