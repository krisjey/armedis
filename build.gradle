/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java Library project to get you started.
 * For more details take a look at the Java Libraries chapter in the Gradle
 * User Manual available at https://docs.gradle.org/5.4/userguide/java_library_plugin.html
 */
buildscript {
    ext {
        springBootVersion = '2.2.6.RELEASE'
        protobufGradlePlugin = '0.8.12'
    }

    repositories {
        mavenCentral()
    }

    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
        classpath "com.google.protobuf:protobuf-gradle-plugin:${protobufGradlePlugin}"
    }
}

plugins {
    id 'org.ajoberstar.grgit' version '4.0.2'
    id "com.gorylenko.gradle-git-properties" version "2.2.2"  // add git information to actuator endpoint
}

ext {
    javaVersion='1.8'
    armeriaVersion='0.99.3'
    lettuceVersion='5.3.0.RELEASE'
    
    protocVersion='3.11.1'
    grpcJavaPluginVersion='1.30.1'
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'com.google.protobuf'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'application' // gradle task plugin for distTar

// gradle-git-properties plugin configuration.
// https://github.com/n0mer/gradle-git-properties
gitProperties {
    gitPropertiesName = "git.properties"

    // Customize directory using gitPropertiesResourceDir config
    // The directory in this config key is also added as a classpath entry
    // (so the git.properties file will be included in the final JAR file)
    gitPropertiesResourceDir = "$projectDir/src/main/resources"
    
    // control of the content of 'git.properties'
    keys = ['git.branch','git.commit.id','git.commit.time']
    
    // customProperty 'greeting', 'Hello' // expression
    // customProperty 'my_custom_git_id', { it.head().id } // closure, 'it' is an instance of org.ajoberstar.grgit.Grgit
    // customProperty 'project_version', { project.version } // closure
}

ext {
	hashVersion = "1.0.0-${grgit.head().abbreviatedId}"
	print "current hash version $hashVersion"
	
	print grgit.branch.current.name
}

// generateGitProperties task runs after the compileJava task
generateGitProperties.dependsOn 'compileJava'

//tasks['clean'].doLast({
//	delete fileTree("${projectDir}/gen-src") { include '**/*.java' }
//})

// same with tasks['clean'].doLast({ ...
clean {
     delete fileTree("${projectDir}/gen-src") { include '**/*.java' }
}

tasks.withType(JavaCompile) {
	javaCompile -> println "Hello, " + javaCompile.name
    
    options.encoding = 'UTF-8'
    // source and target compatibility
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    options.compilerArgs += '-parameters'
}

eclipse {
    classpath {
        defaultOutputDir = file('classes')
        downloadJavadoc = false
        downloadSources = true
        
        file.whenMerged { classpath -> classpath.entries.sort() }
    }
}

group = 'com.github.armedis'
version = '1.0.0-SNAPSHOT'
description = """An HTTP2/gRPC interface for Redis, Support Redis stand-alone/cluster mode."""
mainClassName = "com.github.armedis.ArmedisServer"

protobuf {
    protoc {
        artifact = "com.google.protobuf:protoc:${protocVersion}"

        // Set the location of generated source code by protoc compiler
        generatedFilesBaseDir = "$projectDir/gen-src"
    }

    plugins {
        grpc {
            artifact = "io.grpc:protoc-gen-grpc-java:${grpcJavaPluginVersion}"
        }
    }

    generateProtoTasks {
        all()*.plugins {
            grpc {}
        }
    }
}

// Add source dir for generated source code of gRPC
sourceSets {
    main {
        java {
            // add source folder order
//            srcDirs 'src/main/java'

            // add source folder for protocol buffer gen java file
            srcDirs 'gen-src/main/java'
            // add source folder for protocol buffer gen java file
            srcDirs 'gen-src/main/grpc'
        }
        resources {
//        	srcDirs 'src/main/resources'
        }
    }
    test {
    	java {
//	    	srcDirs 'src/test/java'
    	}
    }
}

repositories {
    jcenter()
}

dependencies {
    implementation "io.grpc:grpc-netty-shaded:${grpcJavaPluginVersion}"
    implementation "io.grpc:grpc-protobuf:${grpcJavaPluginVersion}"
    implementation "io.grpc:grpc-stub:${grpcJavaPluginVersion}"

    // Adjust the list as you need.
    // You can find full set of sub lib in https://line.github.io/armeria/setup.html#choosing-the-artifacts
    [
    'armeria', // The core library.                                                                                                                                        
    'armeria-brave', // Distributed tracing with Brave. See Zipkin integration.                                                                                    
    'armeria-grpc', // gRPC client and server support. See Running a gRPC service and Calling a gRPC service.                                    
//    'armeria-jetty', // Embedded Jetty Servlet container. See Embedding a servlet container.                                                              
//    'armeria-kafka', // Enables sending access logs to Kafka                                                                                                          
    'armeria-logback', // Provides Logback Appender implementation that adds request information. See Logging contextual information.   
//    'armeria-retrofit2', // Allows using Armeria instead of OkHttp as transport layer when using Retrofit. See Retrofit integration.                
    'armeria-rxjava', // RxJava plugin                                                                                                                                           
    'armeria-saml', // SAML support                                                                                                                                          
    'armeria-spring-boot-autoconfigure', // Spring Boot integration                                                                                                                             
//    'armeria-spring-boot-webflux-autoconfigure', // Spring Boot WebFlux integration. See Using Armeria with Spring WebFlux.                                                        
    'armeria-thrift', // Thrift client and server support. See Running a Thrift service and Calling a Thrift service.                                     
//    'armeria-tomcat', // Embedded Tomcat Servlet container. See Embedding a servlet container.                                                          
    'armeria-zookeeper' // ZooKeeper-based service discovery. See Service discovery with ZooKeeper.       
     ].each {
        implementation "com.linecorp.armeria:${it}:${armeriaVersion}"
    }

    implementation "com.linecorp.armeria:armeria-spring-boot-autoconfigure:${armeriaVersion}"
    implementation "com.linecorp.armeria:armeria-spring-boot-actuator-starter:${armeriaVersion}"
    
    implementation "org.springframework.boot:spring-boot-starter-actuator" 

    implementation "org.springframework.boot:spring-boot-starter"
    implementation "org.springframework.boot:spring-boot-configuration-processor"

    implementation "org.apache.commons:commons-text:1.6"

    implementation "org.apache.commons:commons-pool2:2.7.0"
    implementation "io.lettuce:lettuce-core:${lettuceVersion}"

    implementation "org.apache.httpcomponents:httpclient:4.5.10"

    // Logging
    runtime 'ch.qos.logback:logback-classic:1.2.3'
    runtime 'org.slf4j:log4j-over-slf4j:1.7.28'
    
    // Use JUnit test framework
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    
    // json unit
    testImplementation 'net.javacrumbs.json-unit:json-unit-fluent:2.3.0'
    
    // It is a workaround for the bug, when execute junit test case under eclipse(2020-03 (4.15.0)). 
    // java.lang.NoClassDefFoundError: org/junit/platform/engine/EngineDiscoveryListener
    // testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}